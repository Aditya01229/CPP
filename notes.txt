STL in C++
1) Pairs -->
pair <datatype1, datatype2> variablename = {value1, value2}
Access --> pair.first... pair.second.
pair <int, int> a = {3, 4};
pair <int, pair <int, int>> p = {3, {4, 5}};
pair.second.first is equal to 4 and pair.second.seocnd is equal to 5.
pair <int, int> arr[] = {{1, 2}, {3, 4}, {5, 6}};
arr[1].second is 4


2) Vectors -->  SINGLY LINKED LIST
vector <int> v;
v.push_back(2); --> to push an element at the last of the array.
v.emplace_back(2); --> same as push_back but faster than that.

vector<pair <int, int>> vec; -->vector of pair.
vec.push_back({1,2}); --> pushes this pair
vec.emplace_back(1,2); --> No need of curly brackets.
vector <int> v(5, 20); --> this creates a vector with initial values {20, 20, 20, 20, 20}.
vector <int> v2(v); --> v2 vector with the values of v i.e copy of v.


ITERATION OF A VECTOR -->
way 1 --> using indexing --> v[0], v[2], etc.
way 2 --> using .at --> v.at(0), v.at(2)
way 3 --> Iterator - its like a pointer to a vector --> vector <int>::iterator it = v.begin();  // here it is the name of iterator pointing to the base address of vector v.
it++; points to next element .... *(it); gives the value at the address pointed.
v.begin() --> gives the base address of vector v .... v.end() -- address of next of last element.

using iterator in loop to print a vector 
for(vector <int>::iterator it = v.begin(); it != v.end(); it++){
    cout << *(it);
}

for(auto it = v.brgin(); it != v.end(); it++) // auto keyword automatically detects the datatype and makes the iterator.

for(auto it : v){
    cout << it << " ";  --> in this it directly go to every element of the array same as in python..
}


Deletion
//v = {1, 2, 3, 4};
v.erase(v.begin() + 1);
now v is {1, 3, 4};

v.erase(start address, end address); --> This allows us to delete multiple values.

INSERT --> COSTIER OPERATION 
v.insert(position address, number of elements, value);
v.begin() --> 0 indexing
v.begin() + 1 --> 1 index
example --- v.insert(v.begin + 2, 2, 5);
{x, x, 5, 5, y, z....}

v.size() --> GIVES THE SIZE
v.pop_back() --> POPS THE LAST ELEMENT
v.clear() --> DELETES THE ENTIRE VECTOR
v1.swap(v2) --> swaps  the value of v1 and v2.
v.empty() --> gives boolean true or false.

list --> DOUBLY LINKED LIST
list <int> name;
gives front operation as well due to doubly linked list.
name.push_back()
name.push_front()
name.emplace_back()
name.emplace_front()


STACK -- LIFO
stack <int> name;
name.push(value);
name.pop(value);
name.top() --> gives the value at the top
name.empty() --> return boolean
name.size() --> returns size.
st1.swap(st2) --> SWAPS both stacks


QUEUE --> FIFO

queue <int> q;
q.push(2);
q.pop(); --> deletes the first element.
q.front() --> return the first element.
q.back() --> return the last element.
we can perform operations on q.back() and q.front()
q.size();
q.swap(q2);
q.empty();


SET --> STORES IN SORTED AND UNIQUE elements
set <int> s;
s.insert(2);
s.begin(), s.end(), s.size(), s.empty()
s.find(2) --> return iterator which points to 2.
if element is not present iit will always return s.end();
s.count() --> if exists returns 1 else 0.
s.erase(start address, end address)
in sets everything take logn time complexity.